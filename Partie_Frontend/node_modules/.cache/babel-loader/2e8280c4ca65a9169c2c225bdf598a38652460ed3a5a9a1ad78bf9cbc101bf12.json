{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst jwt = require('jsonwebtoken');\nconst File = require('../modele/Files');\nrequire('dotenv').config();\nconst app = express();\napp.use(express.json());\n\n// Configuration de Multer pour le stockage des fichiers\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/'); // Dossier où les fichiers seront stockés\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname); // Nom unique pour éviter les collisions\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Assurez-vous que le dossier de téléchargement existe\nconst fs = require('fs');\nconst path = require('path');\nif (!fs.existsSync('uploads')) {\n  fs.mkdirSync('uploads');\n}\n\n// Endpoint pour afficher les fichiers\nexports.showFiles = async (req, res) => {\n  try {\n    const {\n      token,\n      userID\n    } = req.body;\n    jwt.verify(token, process.env.API_KEY, async (err, decoded) => {\n      if (err) {\n        return res.status(401).json({\n          error: 'Token invalide'\n        });\n      }\n      const file = await File.findOne({\n        where: {\n          userid: userID\n        }\n      });\n      if (!file) {\n        return res.status(404).json({\n          error: 'Fichier non trouvé'\n        });\n      }\n      res.setHeader('Content-Disposition', `attachment; filename=\"${file.nom}\"`);\n      res.setHeader('Content-Type', file.type); // Assurez-vous que le champ 'type' contient le type MIME du fichier\n      res.sendFile(path.resolve(file.path)); // 'path' est le champ qui contient le chemin du fichier sur le système de fichiers\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Erreur lors de la récupération du fichier\"\n    });\n  }\n};\n\n// Endpoint pour insérer un fichier\nexports.InsertFile = async (req, res) => {\n  upload.single('file')(req, res, async err => {\n    if (err) {\n      return res.status(400).json({\n        error: 'Erreur lors du téléversement du fichier'\n      });\n    }\n    const {\n      nom,\n      taille,\n      userid\n    } = req.body;\n    const file = req.file;\n    try {\n      await File.create({\n        nom: nom,\n        file: file.filename,\n        path: file.path,\n        type: file.mimetype,\n        taille: taille,\n        userid: userid\n      });\n      return res.status(200).json(\"Création réussie\");\n    } catch (error) {\n      console.error(error);\n      return res.status(500).json({\n        error: \"Erreur lors de la création du fichier\"\n      });\n    }\n  });\n};\napp.post('/file/upload', exports.InsertFile);\napp.post('/file/show', exports.showFiles);\napp.listen(8000, () => {\n  console.log('Server running on port 8000');\n});","map":{"version":3,"names":["express","require","multer","jwt","File","config","app","use","json","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","fs","path","existsSync","mkdirSync","exports","showFiles","res","token","userID","body","verify","process","env","API_KEY","err","decoded","status","error","findOne","where","userid","setHeader","nom","type","sendFile","resolve","console","InsertFile","single","taille","create","mimetype","post","listen","log"],"sources":["C:/Users/yujir/Documents/Projet annuel/Projjet_Annuel_Perso/partiefront/src/components/PageUser.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst jwt = require('jsonwebtoken');\r\nconst File = require('../modele/Files');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(express.json());\r\n\r\n// Configuration de Multer pour le stockage des fichiers\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/'); // Dossier où les fichiers seront stockés\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + '-' + file.originalname); // Nom unique pour éviter les collisions\r\n  }\r\n});\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n// Assurez-vous que le dossier de téléchargement existe\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nif (!fs.existsSync('uploads')) {\r\n  fs.mkdirSync('uploads');\r\n}\r\n\r\n// Endpoint pour afficher les fichiers\r\nexports.showFiles = async (req, res) => {\r\n  try {\r\n    const { token, userID } = req.body;\r\n\r\n    jwt.verify(token, process.env.API_KEY, async (err, decoded) => {\r\n      if (err) {\r\n        return res.status(401).json({ error: 'Token invalide' });\r\n      }\r\n\r\n      const file = await File.findOne({ where: { userid: userID } });\r\n      if (!file) {\r\n        return res.status(404).json({ error: 'Fichier non trouvé' });\r\n      }\r\n\r\n      res.setHeader('Content-Disposition', `attachment; filename=\"${file.nom}\"`);\r\n      res.setHeader('Content-Type', file.type); // Assurez-vous que le champ 'type' contient le type MIME du fichier\r\n      res.sendFile(path.resolve(file.path)); // 'path' est le champ qui contient le chemin du fichier sur le système de fichiers\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Erreur lors de la récupération du fichier\" });\r\n  }\r\n};\r\n\r\n// Endpoint pour insérer un fichier\r\nexports.InsertFile = async (req, res) => {\r\n  upload.single('file')(req, res, async (err) => {\r\n    if (err) {\r\n      return res.status(400).json({ error: 'Erreur lors du téléversement du fichier' });\r\n    }\r\n\r\n    const { nom, taille, userid } = req.body;\r\n    const file = req.file;\r\n\r\n    try {\r\n      await File.create({\r\n        nom: nom,\r\n        file: file.filename,\r\n        path: file.path,\r\n        type: file.mimetype,\r\n        taille: taille,\r\n        userid: userid\r\n      });\r\n\r\n      return res.status(200).json(\"Création réussie\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      return res.status(500).json({ error: \"Erreur lors de la création du fichier\" });\r\n    }\r\n  });\r\n};\r\n\r\napp.post('/file/upload', exports.InsertFile);\r\napp.post('/file/show', exports.showFiles);\r\n\r\napp.listen(8000, () => {\r\n  console.log('Server running on port 8000');\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}